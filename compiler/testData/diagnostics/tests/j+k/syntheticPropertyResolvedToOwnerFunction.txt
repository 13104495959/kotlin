package

public final class Outer {
    public constructor Outer(/*0*/ project: Project)
    public final val inner: SomeJavaInterface
    public final val project: Project
    public open override /*1*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
    public open override /*1*/ /*fake_override*/ fun hashCode(): kotlin.Int
    public open override /*1*/ /*fake_override*/ fun toString(): kotlin.String
}

public final class Project {
    public constructor Project()
    public open override /*1*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
    public open override /*1*/ /*fake_override*/ fun hashCode(): kotlin.Int
    public open override /*1*/ /*fake_override*/ fun toString(): kotlin.String
}

public interface SomeJavaInterface {
    public open override /*1*/ /*fake_override*/ fun equals(/*0*/ other: kotlin.Any?): kotlin.Boolean
    public abstract fun getProject(): Project!
    public open override /*1*/ /*fake_override*/ fun hashCode(): kotlin.Int
    public abstract fun setProject(/*0*/ other: Project!): kotlin.Unit
    public open override /*1*/ /*fake_override*/ fun toString(): kotlin.String
}
